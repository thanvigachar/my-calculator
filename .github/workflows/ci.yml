name: CI/CD pipeline

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  # ---------------------------------------------------------
  # 🧱 Build Stage - Install dependencies
  # ---------------------------------------------------------
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Dependencies installed successfully"

  # ---------------------------------------------------------
  # 🧪 Test Stage - Unit + Integration Tests
  # ---------------------------------------------------------
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests with Coverage
        run: |
          echo "🧪 Running unit tests..."
          pytest tests/unit/ -v --cov=src --cov-report=term --cov-report=xml

      - name: Run Integration Tests
        run: |
          echo "🧩 Running integration tests..."
          pytest tests/integration/ -v --tb=short || true

  # ---------------------------------------------------------
  # 📊 Coverage Stage - Generate and Upload HTML Report
  # ---------------------------------------------------------
  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          echo "📊 Checking test coverage..."
          pytest tests/ --cov=src --cov-fail-under=80 --cov-report=term-missing --cov-report=html

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  # ---------------------------------------------------------
  # 🧹 Lint Stage - Static Code Analysis
  # ---------------------------------------------------------
  lint:
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Run pylint and save report
        run: |
          echo "🔍 Running pylint..."
          pylint src/ --output-format=text > lint_report.txt || true
          echo "Saved lint report to lint_report.txt"
          score_line=$(grep -E "rated at" lint_report.txt || true)
          score=$(echo "$score_line" | sed -n 's/.*rated at \([0-9.]*\)\/10.*/\1/p')
          echo "Pylint score: ${score:-not-found}"
          if [ -z "$score" ]; then
            echo "Could not determine pylint score"; exit 1
          fi
          awk -v s="$score" 'BEGIN{ if (s+0 < 7.0) exit 1 }' || (echo "Pylint score $score is below threshold 7.0" && exit 1)

      - name: Upload lint report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint_report.txt

  # ---------------------------------------------------------
  # 🎨 Format Stage - Code Formatting with Black
  # ---------------------------------------------------------
  format:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Black
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Check formatting with Black
        run: |
          echo "🎨 Checking formatting with Black..."
          if ! black src/ tests/ --check; then
            echo "⚠️ Black found formatting issues. Applying fixes..."
            black src/ tests/
          else
            echo "✅ Black formatting OK"
          fi

      - name: Show Black diff
        run: black src/ tests/ --diff || true

  # ---------------------------------------------------------
  # 🛡️ Security Stage - Bandit Security Scan
  # ---------------------------------------------------------
  security:
    runs-on: ubuntu-latest
    needs: format
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit (console)
        run: |
          echo "🛡️ Running Bandit security scan..."
          bandit -r src/ -v || true

      - name: Run Bandit (JSON output)
        run: |
          bandit -r src/ -f json -o security_report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security_report.json

  # ---------------------------------------------------------
  # 🚀 Deploy Stage - Package and Upload Build Artifacts
  # ---------------------------------------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-html
          path: artifacts/coverage-html
        continue-on-error: true

      - name: Download lint report
        uses: actions/download-artifact@v4
        with:
          name: lint-report
          path: artifacts/lint
        continue-on-error: true

      - name: Download security report
        uses: actions/download-artifact@v4
        with:
          name: security-report
          path: artifacts/security
        continue-on-error: true

      - name: Create Deployment Package
        run: |
          echo "📦 Creating deployment package..."
          rm -f deployment-package.zip || true
          python -m compileall -b -f src || true
          zip -r deployment-package.zip src artifacts README.md requirements.txt || true
          echo "✅ Created deployment-package.zip"
          ls -lh deployment-package.zip
          unzip -l deployment-package.zip || true

      - name: Upload Deployment Package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-zip
          path: deployment-package.zip
